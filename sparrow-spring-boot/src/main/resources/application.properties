server.port=9100
server.tomcat.uri-encoding= UTF-8
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000


log.root=/data/logs/recommend-data
log.level=INFO


jdbc.dataSource.driverClassName=com.mysql.jdbc.Driver
jdbc.dataSource.initialSize=1
jdbc.dataSource.maxActive=50
jdbc.dataSource.maxWait=1000
jdbc.dataSource.minIdle=1
jdbc.dataSource.validationQuery=SELECT 1
jdbc.dataSource.testWhileIdle=true
jdbc.dataSource.testOnBorrow=true
jdbc.dataSource.removeAbandoned=true
jdbc.dataSource.removeAbandonedTimeout=20
jdbc.dataSource.timeBetweenEvictionRunsMillis=30000
jdbc.dataSource.minEvictableIdleTimeMillis=1800000

#spring.redis.cluster.nodes= 192.168.2.10:9000,192.168.2.14:9001,192.168.2.13:9000
#spring.redis.cluster.max-redirects=3
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.timeout=5000ms

# Lettuce
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=1ms
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=10
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=8
# 关闭超时时间
spring.redis.lettuce.shutdown-timeout=100ms
#驱逐时间 初始化延迟时间 默认-1
#if (delay > 0L) 必须>时才初始化
#spring.redis.lettuce.pool.time-between-eviction-runs=1s






#http://localhost:8023/actuator/hystrix.stream
management.server.port=9200
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=hystrix.stream
#https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix.threadpool.default.coreSize=1
hystrix.threadpool.default.maxQueueSize=1
hystrix.threadpool.default.maximumSize=1
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true

hystrix.threadpool.hystrixGroup.coreSize=5
hystrix.threadpool.hystrixGroup.maximumSize=5
hystrix.threadpool.hystrixGroup.maxQueueSize=-1
hystrix.threadpool.hystrixGroup.queueSizeRejectionThreshold=800



hystrix.threadpool.threadPool2.coreSize=5
hystrix.threadpool.threadPool2.maximumSize=5
hystrix.threadpool.threadPool2.maxQueueSize=-1
hystrix.threadpool.threadPool2.queueSizeRejectionThreshold=10
#设置统计的滚动窗口的时间段大小。该属性是线程池保持指标时间长短
hystrix.threadpool.threadPool2.metrics.rollingStats.timeInMilliseconds=20000

#设定错误百分比，默认值50%，例如一段时间（10s）内有100个请求，其中有55个超时或者异常返回了，那么这段时间内的错误百分比是55%，大于了默认值50%，这种情况下触发熔断器-打开
hystrix.command.testHystrix22.circuitBreaker.errorThresholdPercentage=70
#默认值20.意思是至少有20个请求才进行errorThresholdPercentage错误百分比计算。比如一段时间（10s）内有19个请求全部失败了。错误百分比是100%，但熔断器不会打开，因为requestVolumeThreshold的值是20.
hystrix.command.testHystrix22.circuitBreaker.requestVolumeThreshold=100
#半开试探休眠时间，默认值5000ms。当熔断器开启一段时间之后比如5000ms，会尝试放过去一部分流量进行试探，确定依赖服务是否恢复
hystrix.command.testHystrix22.circuitBreaker.sleepWindowInMilliseconds=10000



hystrix.command.default.circuitBreaker.errorThresholdPercentage=1
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=10000




spring.application.name=resilience4j-demo
spring.jackson.serialization.indent_output=true
#management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.diskspace.enabled=false
#关闭elastic search 的健康检查
#ES问题解决：Elasticsearch health check failed
#或者加入以下配置
#spring.elasticsearch.rest.uris[0]=http://192.168.248.188:9200
management.health.elasticsearch.enabled=false
info.name=${spring.application.name}
info.description=resilience4j demo
info.environment=${spring.profiles.active}
info.version=0.0.1
management.metrics.tags.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=5
resilience4j.circuitbreaker.configs.default.slowCallRateThreshold=50
resilience4j.circuitbreaker.configs.default.slowCallDurationThreshold=1
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=false
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=2s
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.eventConsumerBufferSize=10
resilience4j.circuitbreaker.configs.default.recordExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.configs.default.recordExceptions[1]=java.lang.Throwable
resilience4j.circuitbreaker.configs.default.ignoreExceptions=com.sparrow.spring.robwin.exception.BusinessException
resilience4j.circuitbreaker.configs.shared.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.shared.slidingWindowSize=100
resilience4j.circuitbreaker.configs.shared.permittedNumberOfCallsInHalfOpenState=30
resilience4j.circuitbreaker.configs.shared.waitDurationInOpenState=1s
#以百分比配置失败率阈值。当故障率等于或大于阈值时，断路器转换为打开并开始短路调用
resilience4j.circuitbreaker.configs.shared.failureRateThreshold=50 
resilience4j.circuitbreaker.configs.shared.eventConsumerBufferSize=10
resilience4j.circuitbreaker.configs.shared.ignoreExceptions=com.sparrow.spring.robwin.exception.BusinessException
resilience4j.circuitbreaker.instances.backendA.baseConfig=default
resilience4j.circuitbreaker.instances.backendB.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.backendB.slidingWindowSize=10
resilience4j.circuitbreaker.instances.backendB.minimumNumberOfCalls=10
resilience4j.circuitbreaker.instances.backendB.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.backendB.waitDurationInOpenState=1s
resilience4j.circuitbreaker.instances.backendB.failureRateThreshold=50
resilience4j.circuitbreaker.instances.backendB.eventConsumerBufferSize=10
resilience4j.circuitbreaker.instances.backendB.recordFailurePredicate=com.sparrow.spring.robwin.exception.RecordFailurePredicate
resilience4j.retry.configs.default.maxRetryAttempts=2
resilience4j.retry.configs.default.waitDuration=2
resilience4j.retry.configs.default.retryExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.retry.configs.default.retryExceptions[1]=java.io.IOException
resilience4j.retry.configs.default.ignoreExceptions=com.sparrow.spring.robwin.exception.BusinessException
resilience4j.retry.instances.backendA.maxRetryAttempts=3
resilience4j.retry.instances.backendB.maxRetryAttempts=3
resilience4j.bulkhead.configs.default.maxConcurrentCalls=100
resilience4j.bulkhead.instances.backendA.maxConcurrentCalls=10
resilience4j.bulkhead.instances.backendB.maxWaitDuration=10ms
resilience4j.bulkhead.instances.backendB.maxConcurrentCalls=20
resilience4j.thread-pool-bulkhead.configs.default.maxThreadPoolSize=4
resilience4j.thread-pool-bulkhead.configs.default.coreThreadPoolSize=2
resilience4j.thread-pool-bulkhead.configs.default.queueCapacity=2
resilience4j.thread-pool-bulkhead.instances.backendA.baseConfig=default
resilience4j.thread-pool-bulkhead.instances.backendB.maxThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.backendB.coreThreadPoolSize=1
resilience4j.thread-pool-bulkhead.instances.backendB.queueCapacity=1
resilience4j.ratelimiter.configs.default.registerHealthIndicator=false
resilience4j.ratelimiter.configs.default.limitForPeriod=10
resilience4j.ratelimiter.configs.default.limitRefreshPeriod=1s
resilience4j.ratelimiter.configs.default.timeoutDuration=2
resilience4j.ratelimiter.configs.default.eventConsumerBufferSize=100
resilience4j.ratelimiter.instances.backendA.baseConfig=default
resilience4j.ratelimiter.instances.backendB.limitForPeriod=6
resilience4j.ratelimiter.instances.backendB.limitRefreshPeriod=500ms
resilience4j.ratelimiter.instances.backendB.timeoutDuration=3s


















